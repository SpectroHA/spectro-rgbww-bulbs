# https://esphome.io/guides/configuration-types.html#substitutions
substitutions:

  # substitutions can be changed here if you are using this file directly in the ESPHome dashboard.  The better approach is
  # to incorporate this file as a package using the following lines, and then overwrite these substitutions in your local
  # yaml file by redefining them.
  #
  # packages:
  #   spectro.rgbww: github://SpectroHA/spectro-rgbww-bulbs/spectro-bulb.yaml
  #

  name: spectro-basic              # **** CHANGE DEVICE NAME TO SOMETHING UNIQUE PER DEVICE.  RENAME YAML FILE TO SAME NAME.    ****
                                  # **** USE DASHES (-) INSTEAD OF SPACES OR UNDERSCORE (_).  USE ONLY LOWER CASE LETTERS.     ****

  friendly_name: Spectro Basic     # **** CHANGE FRIENDLY NAME TO SOMETHING UNIQUE PER DEVICE ****

  disable_entities:  "true"    # set to "false" to have all entities show up in Home Assistant automatically

  # https://esphome.io/components/light/index.html#base-light-configuration
  light_restore_mode: RESTORE_INVERTED_DEFAULT_OFF  # change power-on action for main light entity
  default_power_on_state: "Restore Power Off State"

  wifi_ap_timeout: 2min    # default to 2 minute timeout for yaml file as package.

  # https://esphome.io/components/esphome.html#esphome-creators-project
  project_name: Spectro.RGBWW
  project_ver_num: "1.0"
  project_ver_let: y

  sub_red_pin:    GPIO4
  sub_green_pin:  GPIO12
  sub_blue_pin:   GPIO14
  sub_cw_pin:     GPIO5
  sub_ww_pin:     GPIO13

  sub_warm_white_temp: 350 mireds
  sub_cold_white_temp: 150 mireds

  sub_red_freq:   200 hz
  sub_green_freq: 200 hz
  sub_blue_freq:  200 hz
  sub_cw_freq:    400 hz
  sub_ww_freq:    400 hz

# https://esphome.io/components/esp8266.html
esp8266:
  board: esp01_1m
  restore_from_flash: true

# https://esphome.io/guides/automations.html#global-variables
globals:
  - id: global_quick_boot_count
    type: int
    restore_value: yes
    initial_value: '0'

# https://esphome.io/components/esphome.html
esphome:

  name: $name

  project:
    name: $project_name
    version: $project_ver_num($project_ver_let)

  on_boot:
    then:
      - script.execute: script_quick_boot

# https://esphome.io/components/button/index.html
# https://esphome.io/components/button/restart.html
button:
  - platform: restart
    id: restart_button
    name: $friendly_name Restart Firmware
    entity_category: diagnostic
    disabled_by_default: $disable_entities


# https://esphome.io/components/logger.html
logger:

# https://esphome.io/components/api.html
api:
  id: spectro_api

# https://esphome.io/components/ota.html
ota:
  on_error:
    then:
      - button.press: restart_button

# https://esphome.io/components/wifi.html
wifi:
  ssid: spectro_ap
  password: asdfasdfasdfasdf

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ap_timeout: $wifi_ap_timeout

# https://esphome.io/components/captive_portal.html
captive_portal:
    
# https://esphome.io/components/web_server.html
web_server:
#  local: true

# PWM outputs for each LED channel
# https://esphome.io/components/output/esp8266_pwm.html
output:
  - platform: esp8266_pwm
    pin: $sub_red_pin
    frequency: $sub_red_freq
    id: pwm_red
    max_power: .8
  - platform: esp8266_pwm
    pin: $sub_green_pin
    frequency: $sub_green_freq
    id: pwm_green
    max_power: .8
  - platform: esp8266_pwm
    pin: $sub_blue_pin
    frequency: $sub_blue_freq
    id: pwm_blue
    max_power: .8
  - platform: esp8266_pwm
    pin: $sub_cw_pin
    frequency: $sub_cw_freq
    id: pwm_cw
    max_power: .8
  - platform: esp8266_pwm
    pin: $sub_ww_pin
    frequency: $sub_ww_freq
    id: pwm_ww
    max_power: .8

# https://esphome.io/components/light/index.html
light:
  - platform: rgbww
    name: $friendly_name Light
    id: spectro_light
    constant_brightness: true
    color_interlock: true
    red: pwm_red
    green: pwm_green
    blue: pwm_blue
    default_transition_length: 1s
    warm_white: pwm_ww
    cold_white: pwm_cw
    cold_white_color_temperature: 6000 K
    warm_white_color_temperature: 2700 K
    restore_mode: ALWAYS_ON

# https://esphome.io/components/switch/index.html
# https://esphome.io/components/switch/template.html
switch:
  - platform: template
    id: switch_no_hass
    name: $friendly_name No HASS
    optimistic: true
    entity_category: config
    disabled_by_default: $disable_entities
    icon: mdi:toggle-switch-off-outline
    restore_mode: RESTORE_DEFAULT_ON
    on_turn_on:
      - lambda: id(spectro_api)->set_reboot_timeout(0);
      - script.execute: script_save_changes
    on_turn_off:
      - lambda: id(spectro_api)->set_reboot_timeout(900000);
      - script.execute: script_save_changes

# https://esphome.io/components/sensor/uptime.html
sensor:
  - platform: uptime
    name: $friendly_name Uptime
    update_interval: 60s
    entity_category: diagnostic
    disabled_by_default: $disable_entities

# Send IP Address to HA.
# https://esphome.io/components/text_sensor/wifi_info.html
text_sensor:
  - platform: wifi_info
    ip_address:
      name: $friendly_name IP Address
      entity_category: diagnostic
      disabled_by_default: $disable_entities

# https://esphome.io/guides/automations.html#script-component
script:
  - id: script_save_changes
    mode: restart
    then:
      - delay: 3s
      - lambda: global_preferences->sync();

    # increment global_quick_boot_count if bulb stays on less than 10 seconds or never connects to wifi
    # reset wifi credentials if the counter gets to 5
  - id: script_quick_boot
    then:

      # if quick boot count is 5, overwrite wifi credentials to force AP
      - if:
          condition:
            lambda: return ( id(global_quick_boot_count) >= 5 );
          then:
            # wait until attempt to load credentials has been made, that way we know the new ones can be saved properly.
            #- wait_until:
            #    lambda: return ( wifi_wificomponent->tried_loading_creds );

            - lambda: |-
                ESP_LOGD("spectro-basic.yaml", "quick boot count variable is now 5, overwriting credentials and rebooting");

                // overwrite wifi credentials
                //wifi::global_wifi_component->save_wifi_sta("initial_ap","asdfasdfasdfasdf");

                // reset counter and immediately save
                id(global_quick_boot_count) = 0;
                global_quick_boot_count->loop();
                global_preferences->sync();

                // turn on red light
                auto call = id(spectro_light).turn_on();
                call.set_transition_length(500);
                call.set_brightness(0.6);
                call.set_rgb(1.0, 0.0, 0.0);
                call.set_save(false);
                call.perform();

              # short delay
            - delay: 5s

              # reboot
            - button.press: restart_button


      # increment quick boot counter so it will stay incremented if device reboots
      - lambda: |-
          ESP_LOGD("spectro-basic.yaml", "quick boot count variable is now %d.  Need 5 to overwrite credentials", id(global_quick_boot_count));
          id(global_quick_boot_count) += 1;
          global_quick_boot_count->loop();
          global_preferences->sync();

      # if quick boot count gets over 1 (don't flash on first occurance in case it's an accident), flash light to indicate we are in process
      - if:
          condition:
            lambda: return ( id(global_quick_boot_count) > 2 );
          then:
            - lambda: |-
                auto call = id(spectro_light).turn_on();
                call.set_transition_length(500);
                call.set_brightness(0.5);
                call.set_rgb(1.0, 1.0, 0.0);
                call.set_save(false);
                call.perform();
            - delay: 4s
            - light.turn_off: spectro_light

      # wait 10 seconds
      - delay: 10s
      - lambda: ESP_LOGD("spectro-basic.yaml", "quick boot script, 10 seconds up");

      # wait until wifi is connected
      - wait_until: wifi.connected
      - lambda: ESP_LOGD("spectro-basic.yaml", "quick boot script, wifi connected");

      # any time boot is greater than 10 seconds and also connects to wifi, reset quick boot count to 0
      - lambda: |-
          id(global_quick_boot_count) = 0;
          global_quick_boot_count->loop();
          global_preferences->sync();


# Current reserved flash memory:
# 00-25: Wi-Fi Credentials

# 28-39: Warm RGB
# 40-51: Cold RGB
# 52-63: Main Light
# 64-65: Power On State select
# 66-67: Effect select

# 70-71: No HASS switch
# 72-73: Default Fade Length
# 74-75: Max Power
